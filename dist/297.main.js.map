{"version":3,"file":"297.main.js","mappings":"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","sources":["webpack://ens-orb/./src/components/index/download.js","webpack://ens-orb/./src/components/index/table.js","webpack://ens-orb/./src/components/index/query.js","webpack://ens-orb/./src/components/index/placeholder.js","webpack://ens-orb/./src/components/index/links.js","webpack://ens-orb/./src/pages/home.js"],"sourcesContent":["import React from 'react';\n\nimport { CSVLink } from \"react-csv\";\n\nfunction Download({ data, originalQuery }) {\n  const todaysDate = new Date().toLocaleString('en-US', { hour12: false });\n\n  if (!originalQuery.length == 0) {\n    if (data.length == originalQuery.length) {\n      return (\n        <div className=\"sec-Query_Download\" ready=\"true\">\n          <CSVLink\n            data={data}\n            filename={\"ENS.ORB.EXPORT_\" + todaysDate + \".csv\"}\n            >\n            Download\n          </CSVLink>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"sec-Query_Download\" ready=\"loading\">\n          <span href=\"#\">\n            Loading...\n          </span>\n        </div>\n      )\n    }\n  } else {\n    return (\n      <div className=\"sec-Query_Download\" ready=\"false\">\n        <span href=\"#\">\n          Download\n        </span>\n      </div>\n    )\n  }\n}\n\nexport default Download","import React from 'react';\nimport { useTable, useSortBy } from 'react-table';\n\nfunction Table({ columns, data }) {\n const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({\n    columns,\n    data,\n  },\n  useSortBy\n  )\n\n  return (\n    <table\n      {...getTableProps()}\n      className=\"sec-Query_Table\"\n      id=\"sec-Query_Table\"\n      >\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th {...column.getHeaderProps([{ className: column.headerClassName }, column.getSortByToggleProps()])}>\n                {column.render('Header')}\n                <span className='sec-Query_TableSort'>\n                  {column.isSorted ? (column.isSortedDesc ? ' ↓' : ' ↑') : ''}\n                </span>\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody\n        {...getTableBodyProps()}\n        className=\"sec-Query_TableBody\"\n        >\n        {rows.map((row, i) => {\n          prepareRow(row)\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map(cell => (\n                <td {...cell.getCellProps([\n                  {\n                    className: cell.column.dataClassName\n                  },\n                ])}\n                >\n                  {cell.render('Cell')}\n                </td>\n              ))}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n\nexport default Table","import React from 'react';\nimport { gql, GraphQLClient } from 'graphql-request'\n\nimport placeholderText from './placeholder.js';\nimport Download from './download';\nimport Table from './table';\n\nclass Query extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.setCommas = this.setCommas.bind(this);\n    this.setParser = this.setParser.bind(this);\n    this.setLines = this.setLines.bind(this);\n\n    this.unixTimeConverter = this.unixTimeConverter.bind(this);\n\n    this.state = {\n      originalQuery: [],\n      delimiter: ',',\n      wildcard: false,\n      results: [],\n      value: '',\n      parse: false\n    };\n  }\n\n  unixTimeConverter(unixTime) {\n    const milliseconds = unixTime * 1000\n    const dateObject = new Date(milliseconds)\n\n    return dateObject;\n  }\n\n  setParser(event) {\n    const parserButton = event.target;\n\n    if (parserButton.hasAttribute(\"toggled\")) {\n      parserButton.removeAttribute(\"toggled\");\n\n      this.setState({\n        parse: false\n      });\n    } else {\n      parserButton.setAttribute(\"toggled\", \"\");\n\n      this.setState({\n        parse: true\n      });\n    }\n  }\n\n  setCommas(event) {\n    const delimiterButtonCommas = event.target;\n    const delimiterButtonLines = document.querySelector(\"[data-delimiter-button='lines']\");\n\n    if (delimiterButtonLines.hasAttribute(\"toggled\")) {\n      delimiterButtonLines.removeAttribute(\"toggled\");\n    }\n\n    delimiterButtonCommas.setAttribute(\"toggled\", \"\");\n\n    this.setState({\n      delimiter: ','\n    });\n  }\n\n  setLines(event) {\n    const delimiterButtonLines = event.target;\n    const delimiterButtonCommas = document.querySelector(\"[data-delimiter-button='commas']\");\n\n    if (delimiterButtonCommas.hasAttribute(\"toggled\")) {\n      delimiterButtonCommas.removeAttribute(\"toggled\");\n    }\n\n    delimiterButtonLines.setAttribute(\"toggled\", \"\");\n\n    this.setState({\n      delimiter: '\\n'\n    });\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    // Split the addresses with the chosen delimiter\n    // TODO add a way for the user to choose the delimiter\n    var addresses = this.state.value.split(this.state.delimiter);\n\n    addresses.forEach((address, index) => {\n      if (this.state.parse == true) {\n        addresses[index] = address.normalize(\"NFD\").replace(/[^-a-zA-Z0-9\\u00a9\\u00ae\\u0300-\\u036f\\u2000-\\u3300\\ud83c\\ud000-\\udfff\\ud83d\\ud000-\\udfff\\ud83e\\ud000-\\udfff]/ig, \"\").replace(/ /g, \"\").replace(\".eth\",\"\").toLowerCase();\n      } else {\n        addresses[index] = address.normalize(\"NFD\").replace(/ /g, \"\").replace(\".eth\",\"\").toLowerCase();\n      }\n    });\n\n    // Filter all the addresses, check that no address is less than 3 characters in length\n    // (ENS address begins at 3 characters), if it is, ignore that address and remove it from the array.\n    addresses = addresses.filter(address =>\n      !!address && address.length >= 3).reduce((accumulator, currentAddress) => {\n        if(accumulator.indexOf(currentAddress) < 0) {\n          accumulator.push(currentAddress);\n        }\n\n        return accumulator;\n      }, []\n    );\n\n    this.setState({\n      originalQuery: addresses\n    });\n\n    let results = [];\n\n    // Query\n    let isAddressAvailable = (name, callback) => {\n      const endpoint = \"https://api.thegraph.com/subgraphs/name/ensdomains/ens\";\n\n      const graphQLClient = new GraphQLClient(endpoint, {\n        credentials: \"*\",\n        mode: \"cors\"\n      })\n\n      const query = gql`\n        query ($labelName: String!){\n          registrations (where: {labelName: $labelName}) {\n            cost\n            domain {\n              name\n              owner {\n                id\n              }\n            }\n            registrationDate\n            expiryDate\n          }\n        }\n      `\n      const variables =  {\n        labelName: String(name)\n      }\n\n      graphQLClient.request(query, variables).then((data) => {\n        callback()\n\n        // Handle addresses that have never been registered before\n        if (data.registrations[0] === undefined || data.registrations[0].length == 0) {\n          // Handle empty data\n          let addressCost = \"\";\n          const addressName = name + \".eth\";\n          let addressStatus = \"\";\n          const addressRegistration = \"--\";\n          const addressExpiry = \"--\";\n\n          // Handle Availability\n          const filteredAddress = name.replace(/[^-a-zA-Z0-9\\u00a9\\u00ae\\u0300-\\u036f\\u2000-\\u3300\\ud83c\\ud000-\\udfff\\ud83d\\ud000-\\udfff\\ud83e\\ud000-\\udfff]/ig, \"\");\n\n          if (name.length != filteredAddress.length) {\n            addressStatus = \"invalid\"\n          } else {\n            addressStatus = \"available\"\n          }\n\n          // Handle cost\n          if (name.length == 3) {\n            addressCost = \"$640\"\n          } else if (name.length == 4) {\n            addressCost = \"$140\"\n          } else {\n            addressCost = \"$5\"\n          }\n\n          // Compile filtered data\n          results.push({\n            address: addressName,\n            availability: addressStatus,\n            registration: addressRegistration.toLocaleString(\"en-GB\", { hour12: false }),\n            expiry: addressExpiry.toLocaleString(\"en-GB\", { hour12: false }),\n            cost: addressCost,\n          })\n\n          this.setState({\n            results: results\n          })\n        } else {\n          // Handle Name\n          const addressName = data.registrations[0].domain.name;\n\n          // Todays date\n          const todaysDate = new Date();\n\n          // Address date variables\n          let addressStatus = \"\";\n\n          const gracePeriod = 90;\n          const premiumTimeframe = 28;\n\n          // Handle address dates\n          const addressRegistration = this.unixTimeConverter(data.registrations[0].registrationDate);\n          const addressExpiry = this.unixTimeConverter(data.registrations[0].expiryDate);\n\n          const addressGraceExpiry = new Date(addressExpiry);\n          addressGraceExpiry.setDate(addressGraceExpiry.getDate() + gracePeriod)\n\n          const addressPremiumExpiry = new Date(addressGraceExpiry);\n          addressPremiumExpiry.setDate(addressPremiumExpiry.getDate() + premiumTimeframe)\n\n          // Handle Availability\n          const filteredAddress = name.replace(/[^-a-zA-Z0-9\\u00a9\\u00ae\\u0300-\\u036f\\u2000-\\u3300\\ud83c\\ud000-\\udfff\\ud83d\\ud000-\\udfff\\ud83e\\ud000-\\udfff]/ig, \"\");\n\n          if (name.length != filteredAddress.length) {\n            addressStatus = \"invalid\"\n          } else {\n            if (addressGraceExpiry < todaysDate && addressPremiumExpiry > todaysDate) {\n              addressStatus = \"premium\"\n            } else if (todaysDate > addressPremiumExpiry) {\n              addressStatus = \"available\"\n            } else {\n              addressStatus = \"unavailable\"\n            }\n          }\n\n          // Handle Cost\n          let addressCost = \"\";\n\n          if (addressStatus == \"available\") {\n            if (addressName.length == 3) {\n              addressCost = \"$640\"\n            } else if (addressName.length == 4) {\n              addressCost = \"$140\"\n            } else {\n              addressCost = \"$5\"\n            }\n          } else if (addressStatus == \"premium\") {\n            const currentPremium = 100000;\n            const premiumTimeframeInMilliseconds = premiumTimeframe * 24 * 60 * 60 * 1000;\n            const premiumCostByMillisecond = currentPremium / premiumTimeframeInMilliseconds;\n            const msBetweenTodayPremium = (addressPremiumExpiry - todaysDate);\n\n            addressCost = premiumCostByMillisecond * msBetweenTodayPremium;\n            addressCost = \"$\" + addressCost.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});\n\n          } else {\n            addressCost = \"--\"\n          }\n\n          // Compile filtered data\n          results.push({\n            address: addressName,\n            availability: addressStatus,\n            registration: addressRegistration.toLocaleString('en-GB', { hour12: false }),\n            expiry: addressExpiry.toLocaleString('en-GB', { hour12: false }),\n            cost: addressCost\n          })\n\n          this.setState({\n            results: results\n          })\n        }\n      })\n    }\n\n    // Function that will run through the provided addresses, querying\n    // them one by one, and producing a table row for each valid response.\n    let runSearch = (index, callback) => {\n      const address = addresses[index];\n\n      if (!address) return callback();\n\n      isAddressAvailable(address, isAvailable => {\n      runSearch(++index, callback);\n      });\n    };\n\n    runSearch(0, () => {\n      return\n    });\n\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <>\n      <div className='sec-Query_Controls'>\n        <div className=\"sec-Query_Parsers\">\n        </div>\n        <div className=\"sec-Query_Delimiters\">\n          <input\n            className='sec-Query_Delimiter'\n            toggled=\"true\" // Default Choice\n            onClick={ this.setCommas }\n            data-delimiter-button=\"commas\"\n            type=\"button\"\n            value=\"Comma\"\n          />\n\n          <input\n            className='sec-Query_Delimiter'\n            onClick={ this.setLines }\n            data-delimiter-button=\"lines\"\n            type=\"button\"\n            value=\"New Line\"\n          />\n        </div>\n        <div className=\"sec-Query_Parsers\">\n          <input\n            className='sec-Query_Parser'\n            onClick={ this.setParser }\n            data-delimiter-button=\"lines\"\n            type=\"button\"\n            value=\"Remove Invalid Characters\"\n          />\n        </div>\n        </div>\n        <div className=\"sec-Query_Query\">\n          <form className=\"sec-Query_Form sec-Query_Form-entry\" onSubmit={ this.handleSubmit }>\n            <textarea\n              value={ this.state.value }\n              onChange={ this.handleChange }\n              spellCheck=\"false\"\n              placeholder={ placeholderText() }\n            />\n            <div className='sec-Query_Tools'>\n              <input className=\"sec-Query_Button\" type=\"submit\" value=\"Submit\" />\n              <Download\n                data = { this.state.results }\n                originalQuery = { this.state.originalQuery }\n              />\n            </div>\n          </form>\n        </div>\n\n        <div className=\"sec-Query_Response\">\n          <Table\n            data = { this.state.results }\n            columns = {[\n                {\n                  Header: 'Address',\n                  headerClassName: 'sec-Query_TableHeader sec-Query_TableHeader-address',\n                  accessor: 'address',\n                  dataClassName: 'sec-Query_TableData sec-Query_TableData-address',\n                  Cell: ({ value }) => <a href={'https://app.ens.domains/name/' + value + '/register'}>{ value }</a>\n                },\n                {\n                  Header: 'Registration Date',\n                  headerClassName: 'sec-Query_TableHeader sec-Query_TableHeader-registration',\n                  accessor: 'registration',\n                  dataClassName: 'sec-Query_TableData sec-Query_TableData-registration',\n                  Cell: ({ row, value }) => <a href={'https://app.ens.domains/name/' + row.original.address + '/register'}> { value } </a>,\n                  disableSortBy: true\n                },\n                {\n                  Header: 'Expiry Date',\n                  headerClassName: 'sec-Query_TableHeader sec-Query_TableHeader-expiry',\n                  accessor: 'expiry',\n                  dataClassName: 'sec-Query_TableData sec-Query_TableData-expiry',\n                  Cell: ({ row, value }) => <a href={'https://app.ens.domains/name/' + row.original.address + '/register'}>{ value }</a>,\n                  disableSortBy: true\n                },\n                {\n                  Header: 'Availability',\n                  headerClassName: 'sec-Query_TableHeader sec-Query_TableHeader-availability',\n                  accessor: 'availability',\n                  dataClassName: 'sec-Query_TableData sec-Query_TableData-available',\n                  Cell: ({ row, value }) => {\n                    return (\n                      <a href={'https://app.ens.domains/name/' + row.original.address + '/register'}>\n                        <div className=\"sec-Query_TableData-availability\" data-address-availability={ value }></div>\n                      </a>\n                    )\n                  }\n                },\n                {\n                  Header: 'Cost',\n                  headerClassName: 'sec-Query_TableHeader sec-Query_TableHeader-cost',\n                  accessor: 'cost',\n                  dataClassName: 'sec-Query_TableData sec-Query_TableData-cost',\n                  Cell: ({ row, value }) => <a href={`https://app.ens.domains/name/${ row.original.address }.eth/register`}>{ value }</a>,\n                  sortMethod: (a, b) => Number(a)-Number(b)\n                }\n              ]\n            }\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Query;","export default function placeholderText() {\n  const placeholderText = \">>>> Notes:\\n>\\n> - Addresses\\n>\\n>   It doesn’t matter whether or not you include\\n>   the ens ‘.eth’ extension, the app will handle\\n>   whatever you enter accordingly.\\n>   \\n>   Toggling the 'Remove Invalid Characters' button\\n>   will remove all characters that will inevitably\\n>   turn up an invalid, and ultimately\\n>   unregisterable address.\\n>\\n>\\n> - Registration/Expiry Dates\\n>\\n>   These values just represent the most recent \\n>   registration or expiry date, if there isn't \\n>   one, it'll be represented as '--', meaning \\n>   the name has never been registered before.\\n>\\n>\\n> - Availability\\n>\\n>   Availability is represented by three colours:\\n>   \\n>   Red : Unavailable\\n>   Orange : Premium\\n>   Green : Available\\n>   Grey : Invalid\\n>\\n>\\n> - Requests\\n>\\n>   This is probably going to be a pretty niche \\n>   utility, but if you do have a request for a \\n>   feature that you'd like to be added: just submit \\n>   a issue on the Github.\\n>\\n>   Github: https://github.com/alruban/ens-orb\\n>\\n>\\n>                      ,.,*                       \\n>               ..,*   ..,/,     ,,               \\n>               .,*/   ,,,*     ..,/              \\n>               .,,/   ..,*     ..*/              \\n>       ..,    ..,,*  ..,,/    ..*//              \\n>      ,,,*    .,,**  .,**/   ..,**               \\n>       ,**/   ,,,*/ ,.,,*/  ..,**/               \\n>       ,,**   ,..,* ...,*  ...,,*                \\n>       ,,**/  ,..,/ ,,,*/  ..,,*.                \\n>        ,,,*  ,..,,. ..,* ..,,**                 \\n>        ,.,,*  .,,....,..  ..**                  \\n>        ,,...........,,....,,*/            ,,,*  \\n>        ,.......,,,*.,,,,,,*,**        ...,,,**  \\n>        ....,,,,,,,,,,,,....,*/      ...,,**     \\n>         ,...,,,,,*,,.,...,,.,,/.  ..,,***       \\n>         ,,,,,,,,,,,,.........,,*,,.,***         \\n>         ,,...,,,,,,... .  ....,,,,,,*           \\n>          ,,,,.,,,,,.    ....,,,,,***            \\n>          *,,,...,.... ...,,,,***//              \\n>           **,,,,,,,..,,,,,*****,                \\n>            ******,,,***//////                   \\n>            *,,,,,,,**/////*                     \\n>            .,.,...,,*******                     \\n>            .......,,,,*****                     \\n>            ........,,,,,***                     \\n>\\n>\\n>\\n\"\n\n  return placeholderText\n}","import React from 'react';\nimport { ReactSVG } from 'react-svg';\n\nimport iconBlockscan from '/src/svgs/icon-blockscan.svg';\nimport iconGit from '/src/svgs/icon-git.svg';\n\nexport default function Links() {\n  return (\n    <div className=\"sec-Author\">\n      <div className=\"sec-Author_Inner\">\n        <div className=\"sec-Author_Content\">\n          <div className=\"sec-Author_Links\">\n            <a className=\"sec-Author_Link\" href=\"https://chat.blockscan.com/index\">\n              <ReactSVG\n                src={ iconBlockscan }\n                beforeInjection={(svg) => {\n                  svg.classList.add(\"sec-Author_Icon\")\n                }}\n              />\n            </a>\n\n            <a className=\"sec-Author_Text\" href=\"https://etherscan.io\">\n              alruban.eth\n            </a>\n\n            <a className=\"sec-Author_Link\" href=\"https://github.com/alruban/ens-orb\">\n              <ReactSVG\n                src={ iconGit }\n                beforeInjection={(svg) => {\n                  svg.classList.add(\"sec-Author_Icon\")\n                }}\n              />\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","import React from 'react';\n\nimport Layout from '../layouts/layout';\nimport Query from '../components/index/query';\nimport Links from '../components/index/links';\n\nconst Index = () => (\n  <Layout>\n    <Links/>\n    <section className=\"sec-Query\">\n      <div className=\"sec-Query_Inner\">\n        <header className=\"sec-Query_Header\">\n          <h3 className=\"sec-Query_Title\">\n            orb\n          </h3>\n\n          <h6 className=\"sec-Query_Subtitle\">\n            A bulk query application for the Ethereum Name Service network.\n          </h6>\n\n          <p className=\"sec-Query_Description\">\n            Choose the relevant delimiter, and then just paste the list of names that you want to query into the terminal below.\n          </p>\n        </header>\n        <div className=\"sec-Query_Body\">\n          <Query />\n        </div>\n      </div>\n    </section>\n  </Layout>\n);\n\nexport default Index;"],"names":["data","originalQuery","todaysDate","Date","toLocaleString","hour12","length","className","ready","CSVLink","filename","href","columns","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","id","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","headerClassName","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","dataClassName","Query","props","handleChange","bind","handleSubmit","setCommas","setParser","setLines","unixTimeConverter","state","delimiter","wildcard","results","value","parse","unixTime","event","parserButton","target","hasAttribute","removeAttribute","this","setState","setAttribute","delimiterButtonCommas","delimiterButtonLines","document","querySelector","addresses","split","forEach","address","index","normalize","replace","toLowerCase","filter","reduce","accumulator","currentAddress","indexOf","push","runSearch","callback","name","graphQLClient","GraphQLClient","credentials","mode","query","gql","variables","labelName","String","request","then","undefined","registrations","addressCost","addressStatus","addressName","filteredAddress","availability","registration","expiry","cost","domain","addressRegistration","registrationDate","addressExpiry","expiryDate","addressGraceExpiry","setDate","getDate","addressPremiumExpiry","currentPremium","minimumFractionDigits","maximumFractionDigits","isAddressAvailable","isAvailable","preventDefault","toggled","onClick","type","onSubmit","onChange","spellCheck","placeholder","Header","accessor","Cell","original","disableSortBy","sortMethod","a","b","Number","React","Links","src","iconBlockscan","beforeInjection","svg","classList","add","iconGit"],"sourceRoot":""}